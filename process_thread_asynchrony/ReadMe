进程、线程、异步学习文档

多线程编程对于具有如下特点的任务而言是非常理想的：
本质上是异步的；
需要多个并发活动；
每个活动的处理顺序可能是不确定的，或者说是随机的、不可预测的；

使用多线程编程，以及类似Queue的共享数据结构，这个编程任务可以规划成几个特定函数的线程。
1、UserRequestThread：负责读取客户端输入，该输入可能来自I/O通道。程序将创建多个线程，
每个客户端一个，客户端的请求将会被放入队列中；
2、RequestProcessor：该线程负责从队列中获取请求并进行处理，为第3个线程提供输出；
3、ReplyThread：负责向用户输出，将结果传回给用户（如果是网络应用），或者把数据写到本地文件系统或数据库中；

全局解释器锁（GIL）
Python代码的执行是由Python虚拟机（又名解释器主循环）控制的。Python在主循环中同时只能有一个
控制线程在执行。
对 Python 虚拟机的访问是由全局解释器锁（GIL）控制的。这个锁就是用来保证同时只
能有一个线程运行的。在多线程环境中，Python 虚拟机将按照下面所述的方式执行。
1．设置 GIL。
2．切换进一个线程去运行。
3．执行下面操作之一。
a．指定数量的字节码指令。
b．线程主动让出控制权（可以调用 time.sleep(0)来完成）。
4．把线程设置回睡眠状态（切换出线程）。
5．解锁 GIL。
6．重复上述步骤